AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Animore appliaction server api

Parameters:
  DBUSERNAME:
    Type: String
    Description: Username for the database
  DBPASSWORD:
    Type: String
    Description: Password for the database

Resources:
  MyLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: MyLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: MySecretsManagerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: secretsmanager:GetSecretValue
                Resource: "arn:aws:secretsmanager:ap-northeast-2:142111257198:secret:rds-db-credentials/animoresdbinstatnce1/admin/1702189030443-4YKkVI"
        - PolicyName: AWSLambdaBasicExecutionRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
        - PolicyName: AWSLambdaVPCAccessExecutionRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource: '*'
        - PolicyName: SecretsManagerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  Ref: DBSecret


  SpringOnLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: animores.serverapi.LambdaHandler::handleRequest
      Runtime: java17
      CodeUri: .
      MemorySize: 1024
      SnapStart:
        ApplyOn: "PublishedVersions"
      AutoPublishAlias: "stage"
      Policies: AWSLambdaBasicExecutionRole
      Timeout: 60
      Role: !GetAtt MyLambdaExecutionRole.Arn
      Events:
        HttpApiEvent:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY

  RDSdb:
    Type: AWS::RDS::DBInstance
    Properties:
      MasterUsername: !Ref DBUSERNAME
      MasterUserPassword: !Ref DBPASSWORD
      Engine: mysql
      DBInstanceClass: db.t3.small
      StorageType: gp2
      AllocatedStorage: 20

  RedisSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ElastiCache Redis
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          CidrIp: 0.0.0.0/0

  RedisCacheCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      CacheNodeType: cache.t3.micro
      Engine: redis
      NumCacheNodes: 1
      AutoMinorVersionUpgrade: true
      AZMode: single-az
      CacheSubnetGroupName: default
      EngineVersion: 7.1
      PreferredMaintenanceWindow: 'sun:05:00-sun:06:00'
      Port: 6379
      CacheParameterGroupName: default.redis7
      VpcSecurityGroupIds:
        - !GetAtt RedisSecurityGroup.GroupId

  DBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-DBSecret
      SecretString:
        Fn::Join:
          - ''
          - - '{"db_username": "'
            - Fn::GetAtt:
                - RDSdb
                - MasterUsername
            - '", "db_password": "'
            - !Ref DBPASSWORD
            - '", "db_host": "'
            - Fn::GetAtt:
                - RDSdb
                - Endpoint.Address
            - '"}'
