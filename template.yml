AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Animore appliaction server api

Parameters:
  DBUSERNAME:
    Type: String
    Description: Username for the database
  DBPASSWORD:
    Type: String
    Description: Password for the database
  S3AccessKey:
    Type: String
    Description: Access key for S3
  S3SecretKey:
    Type: String
    Description: Secret key for S3
  S3Region:
    Type: String
    Description: Region for S3
  BucketName:
    Type: String
    Description: Bucket name for S3
  JWTSecretKey:
    Type: String
    Description: Secret key for JWT
  RedisEndpoint:
    Type: String
    Description: Endpoint for Redis

Resources:
  MyLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: MyLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AWSLambdaBasicExecutionRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
        - PolicyName: AWSLambdaVPCAccessExecutionRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource: '*'
        - PolicyName: SecretsManagerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  Ref: DBSecret

  SpringOnLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: animores.serverapi.LambdaHandler::handleRequest
      Runtime: java17
      CodeUri: .
      MemorySize: 2048
      SnapStart:
        ApplyOn: "PublishedVersions"
      AutoPublishAlias: "stage"
      Policies: AWSLambdaBasicExecutionRole
      Timeout: 60
      Role: !GetAtt MyLambdaExecutionRole.Arn
      Events:
        HttpApiEvent:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY

  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.31.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 172.31.64.0/20
      MapPublicIpOnLaunch: true

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 172.31.16.0/20
      MapPublicIpOnLaunch: true

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 172.31.32.0/20

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 172.31.48.0/20

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  MyDBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: "Subnet group for RDS"
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  MyDBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Security group for RDS"
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '3306'
            ToPort: '3306'
            CidrIp: 0.0.0.0/0

      SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: '3306'
            ToPort: '3306'
            CidrIp: 0.0.0.0/0

  RDSdb:
    Type: AWS::RDS::DBInstance
    Properties:
      MasterUsername: !Ref DBUSERNAME
      MasterUserPassword: !Ref DBPASSWORD
      Engine: mysql
      DBInstanceClass: db.t3.micro
      StorageType: gp2
      AllocatedStorage: 20
      DBSubnetGroupName: !Ref MyDBSubnetGroup
      VPCSecurityGroups:
        - !GetAtt MyDBSecurityGroup.GroupId

  RedisSubnetGroup:
    Type: "AWS::ElastiCache::SubnetGroup"
    Properties:
      Description: "Subnet group for ElastiCache"
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  RedisSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref MyVPC
      GroupDescription: Security group for ElastiCache Redis
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          CidrIp: 0.0.0.0/0

  RedisCacheCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      CacheNodeType: cache.t3.micro
      Engine: redis
      NumCacheNodes: 1
      AutoMinorVersionUpgrade: true
      AZMode: single-az
      EngineVersion: 7.1
      PreferredMaintenanceWindow: 'sun:05:00-sun:06:00'
      Port: 6379
      CacheParameterGroupName: default.redis7
      CacheSubnetGroupName: !Ref RedisSubnetGroup
      VpcSecurityGroupIds:
        - !GetAtt RedisSecurityGroup.GroupId

  DBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-DBSecret
      SecretString:
        Fn::Join:
          - ''
          - - '{"db_username": "'
            - Fn::GetAtt:
                - RDSdb
                - MasterUsername
            - '", "db_password": "'
            - Ref: DBPASSWORD
            - '", "db_host": "'
            - Fn::GetAtt:
                - RDSdb
                - Endpoint.Address
            - '", "s3_access_key": "'
            - Ref: S3AccessKey
            - '", "s3_secret_key": "'
            - Ref: S3SecretKey
            - '", "s3_region": "'
            - Ref: S3Region
            - '", "bucket_name": "'
            - Ref: BucketName
            - '", "jwt_secret_key": "'
            - Ref: JWTSecretKey
            - '", "redis_endpoint": "'
            - Ref: RedisEndpoint
            - '"}'